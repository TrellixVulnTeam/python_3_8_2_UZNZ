# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lib', [dirname(__file__)])
        except ImportError:
            import _lib
            return _lib
        if fp is not None:
            try:
                _mod = imp.load_module('_lib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lib = swig_import_helper()
    del swig_import_helper
else:
    import _lib
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def date_time():
    return _lib.date_time()
date_time = _lib.date_time

def free_ef(arg1):
    return _lib.free_ef(arg1)
free_ef = _lib.free_ef

def get_ef():
    return _lib.get_ef()
get_ef = _lib.get_ef

def get_hostname(arg2):
    return _lib.get_hostname(arg2)
get_hostname = _lib.get_hostname

def getjpi(arg1, INPUT, arg3):
    return _lib.getjpi(arg1, INPUT, arg3)
getjpi = _lib.getjpi

def getsyi(arg1, arg4):
    return _lib.getsyi(arg1, arg4)
getsyi = _lib.getsyi

def spawn(arg1, arg2, arg3, arg4, arg5):
    return _lib.spawn(arg1, arg2, arg3, arg4, arg5)
spawn = _lib.spawn

def do_command(arg1):
    return _lib.do_command(arg1)
do_command = _lib.do_command

def put_common(arg1):
    return _lib.put_common(arg1)
put_common = _lib.put_common

def get_common():
    return _lib.get_common()
get_common = _lib.get_common

def create_dir(arg1, arg2, arg3, arg4):
    return _lib.create_dir(arg1, arg2, arg3, arg4)
create_dir = _lib.create_dir
# This file is compatible with both classic and new-style classes.


