# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ppropdef', [dirname(__file__)])
        except ImportError:
            import _ppropdef
            return _ppropdef
        if fp is not None:
            try:
                _mod = imp.load_module('_ppropdef', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ppropdef = swig_import_helper()
    del swig_import_helper
else:
    import _ppropdef
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_ppropdef.PPROP_C_PARSE_STYLE_TEMP_swigconstant(_ppropdef)
PPROP_C_PARSE_STYLE_TEMP = _ppropdef.PPROP_C_PARSE_STYLE_TEMP

_ppropdef.PPROP_C_PARSE_STYLE_PERM_swigconstant(_ppropdef)
PPROP_C_PARSE_STYLE_PERM = _ppropdef.PPROP_C_PARSE_STYLE_PERM

_ppropdef.PPROP_C_HOME_RAD_swigconstant(_ppropdef)
PPROP_C_HOME_RAD = _ppropdef.PPROP_C_HOME_RAD

_ppropdef.PPROP_C_CASE_LOOKUP_TEMP_swigconstant(_ppropdef)
PPROP_C_CASE_LOOKUP_TEMP = _ppropdef.PPROP_C_CASE_LOOKUP_TEMP

_ppropdef.PPROP_C_CASE_LOOKUP_PERM_swigconstant(_ppropdef)
PPROP_C_CASE_LOOKUP_PERM = _ppropdef.PPROP_C_CASE_LOOKUP_PERM

_ppropdef.PPROP_C_MEDDLE_ENABLE_swigconstant(_ppropdef)
PPROP_C_MEDDLE_ENABLE = _ppropdef.PPROP_C_MEDDLE_ENABLE

_ppropdef.PPROP_C_MEDDLE_swigconstant(_ppropdef)
PPROP_C_MEDDLE = _ppropdef.PPROP_C_MEDDLE

_ppropdef.PPROP_C_UNITS_swigconstant(_ppropdef)
PPROP_C_UNITS = _ppropdef.PPROP_C_UNITS

_ppropdef.PPROP_C_SS_LOG_ENABLE_swigconstant(_ppropdef)
PPROP_C_SS_LOG_ENABLE = _ppropdef.PPROP_C_SS_LOG_ENABLE

_ppropdef.PPROP_C_SS_LOG_DISABLE_swigconstant(_ppropdef)
PPROP_C_SS_LOG_DISABLE = _ppropdef.PPROP_C_SS_LOG_DISABLE

_ppropdef.PPROP_C_SS_LOG_UNLOAD_swigconstant(_ppropdef)
PPROP_C_SS_LOG_UNLOAD = _ppropdef.PPROP_C_SS_LOG_UNLOAD

_ppropdef.PPROP_C_TOKEN_swigconstant(_ppropdef)
PPROP_C_TOKEN = _ppropdef.PPROP_C_TOKEN

_ppropdef.PPROP_C_DEADLOCK_WAIT_swigconstant(_ppropdef)
PPROP_C_DEADLOCK_WAIT = _ppropdef.PPROP_C_DEADLOCK_WAIT

_ppropdef.PPROP_C_SEARCH_SYMLINK_TEMP_swigconstant(_ppropdef)
PPROP_C_SEARCH_SYMLINK_TEMP = _ppropdef.PPROP_C_SEARCH_SYMLINK_TEMP

_ppropdef.PPROP_C_SEARCH_SYMLINK_PERM_swigconstant(_ppropdef)
PPROP_C_SEARCH_SYMLINK_PERM = _ppropdef.PPROP_C_SEARCH_SYMLINK_PERM

_ppropdef.PPROP_C_KERNEL_THREAD_LIMIT_swigconstant(_ppropdef)
PPROP_C_KERNEL_THREAD_LIMIT = _ppropdef.PPROP_C_KERNEL_THREAD_LIMIT

_ppropdef.PARSE_STYLE_C_ODS2_swigconstant(_ppropdef)
PARSE_STYLE_C_ODS2 = _ppropdef.PARSE_STYLE_C_ODS2

_ppropdef.PARSE_STYLE_C_ODS5_swigconstant(_ppropdef)
PARSE_STYLE_C_ODS5 = _ppropdef.PARSE_STYLE_C_ODS5

_ppropdef.PARSE_STYLE_C_TRADITIONAL_swigconstant(_ppropdef)
PARSE_STYLE_C_TRADITIONAL = _ppropdef.PARSE_STYLE_C_TRADITIONAL

_ppropdef.PARSE_STYLE_C_EXTENDED_swigconstant(_ppropdef)
PARSE_STYLE_C_EXTENDED = _ppropdef.PARSE_STYLE_C_EXTENDED

_ppropdef.PPROP_K_CASE_BLIND_swigconstant(_ppropdef)
PPROP_K_CASE_BLIND = _ppropdef.PPROP_K_CASE_BLIND

_ppropdef.PPROP_K_CASE_SENSITIVE_swigconstant(_ppropdef)
PPROP_K_CASE_SENSITIVE = _ppropdef.PPROP_K_CASE_SENSITIVE

_ppropdef.PPROP_K_SEARCH_SYMLINK_NONE_swigconstant(_ppropdef)
PPROP_K_SEARCH_SYMLINK_NONE = _ppropdef.PPROP_K_SEARCH_SYMLINK_NONE

_ppropdef.PPROP_K_SEARCH_SYMLINK_ALL_swigconstant(_ppropdef)
PPROP_K_SEARCH_SYMLINK_ALL = _ppropdef.PPROP_K_SEARCH_SYMLINK_ALL

_ppropdef.PPROP_K_SEARCH_SYMLINK_NOELLIPS_swigconstant(_ppropdef)
PPROP_K_SEARCH_SYMLINK_NOELLIPS = _ppropdef.PPROP_K_SEARCH_SYMLINK_NOELLIPS
# This file is compatible with both classic and new-style classes.


