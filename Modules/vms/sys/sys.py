# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sys', [dirname(__file__)])
        except ImportError:
            import _sys
            return _sys
        if fp is not None:
            try:
                _mod = imp.load_module('_sys', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sys = swig_import_helper()
    del swig_import_helper
else:
    import _sys
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def asctim(arg1, arg3):
    return _sys.asctim(arg1, arg3)
asctim = _sys.asctim

def asctoid(arg1):
    return _sys.asctoid(arg1)
asctoid = _sys.asctoid

def assign(arg1, arg3, arg4, arg5):
    return _sys.assign(arg1, arg3, arg4, arg5)
assign = _sys.assign

def bintim(arg1):
    return _sys.bintim(arg1)
bintim = _sys.bintim

def cancel(arg1):
    return _sys.cancel(arg1)
cancel = _sys.cancel

def crembx(arg1, arg3, arg4, arg5, arg6, arg7, arg8):
    return _sys.crembx(arg1, arg3, arg4, arg5, arg6, arg7, arg8)
crembx = _sys.crembx

def dassgn(arg1):
    return _sys.dassgn(arg1)
dassgn = _sys.dassgn

def delmbx(arg1):
    return _sys.delmbx(arg1)
delmbx = _sys.delmbx

def find_held(arg1, INOUT):
    return _sys.find_held(arg1, INOUT)
find_held = _sys.find_held

def finish_rdb(INPUT):
    return _sys.finish_rdb(INPUT)
finish_rdb = _sys.finish_rdb

def getmsg(arg1, arg3):
    return _sys.getmsg(arg1, arg3)
getmsg = _sys.getmsg

def hiber():
    return _sys.hiber()
hiber = _sys.hiber

def idtoasc(arg1, INOUT):
    return _sys.idtoasc(arg1, INOUT)
idtoasc = _sys.idtoasc

def getrmi(arg1):
    return _sys.getrmi(arg1)
getrmi = _sys.getrmi

def getuai(arg1, arg2):
    return _sys.getuai(arg1, arg2)
getuai = _sys.getuai

def setuai(arg1, arg2):
    return _sys.setuai(arg1, arg2)
setuai = _sys.setuai

def getdvi(arg1, arg2):
    return _sys.getdvi(arg1, arg2)
getdvi = _sys.getdvi

def device_scan(arg2, arg3, INOUT):
    return _sys.device_scan(arg2, arg3, INOUT)
device_scan = _sys.device_scan

def trnlnm(arg1, arg2, arg3, arg4, arg5):
    return _sys.trnlnm(arg1, arg2, arg3, arg4, arg5)
trnlnm = _sys.trnlnm

def getjpi(INOUT, arg2, arg3):
    return _sys.getjpi(INOUT, arg2, arg3)
getjpi = _sys.getjpi

def getqui(arg1, INOUT, arg3):
    return _sys.getqui(arg1, INOUT, arg3)
getqui = _sys.getqui

def getsyi(INOUT, arg2, arg3):
    return _sys.getsyi(INOUT, arg2, arg3)
getsyi = _sys.getsyi

def forcex(arg1, arg2, arg3):
    return _sys.forcex(arg1, arg2, arg3)
forcex = _sys.forcex

def rem_ident(arg1):
    return _sys.rem_ident(arg1)
rem_ident = _sys.rem_ident

def add_ident(arg1, arg2, arg3):
    return _sys.add_ident(arg1, arg2, arg3)
add_ident = _sys.add_ident

def rem_holder(arg1, arg2):
    return _sys.rem_holder(arg1, arg2)
rem_holder = _sys.rem_holder

def add_holder(arg1, arg2, arg3):
    return _sys.add_holder(arg1, arg2, arg3)
add_holder = _sys.add_holder

def getlki(INOUT, arg2):
    return _sys.getlki(INOUT, arg2)
getlki = _sys.getlki

def uicstr(arg1, arg3):
    return _sys.uicstr(arg1, arg3)
uicstr = _sys.uicstr

def gettim():
    return _sys.gettim()
gettim = _sys.gettim

def crelnm(arg1, arg2, arg3, arg4, arg5):
    return _sys.crelnm(arg1, arg2, arg3, arg4, arg5)
crelnm = _sys.crelnm

def show_intrusion(arg1, arg6, INOUT):
    return _sys.show_intrusion(arg1, arg6, INOUT)
show_intrusion = _sys.show_intrusion
# This file is compatible with both classic and new-style classes.


