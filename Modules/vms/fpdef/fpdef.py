# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fpdef', [dirname(__file__)])
        except ImportError:
            import _fpdef
            return _fpdef
        if fp is not None:
            try:
                _mod = imp.load_module('_fpdef', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fpdef = swig_import_helper()
    del swig_import_helper
else:
    import _fpdef
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_fpdef.FP_K_BALANCE_PORTS_swigconstant(_fpdef)
FP_K_BALANCE_PORTS = _fpdef.FP_K_BALANCE_PORTS

_fpdef.FP_K_CPU_CONFIGURED_swigconstant(_fpdef)
FP_K_CPU_CONFIGURED = _fpdef.FP_K_CPU_CONFIGURED

_fpdef.FP_K_CPU_STARTING_swigconstant(_fpdef)
FP_K_CPU_STARTING = _fpdef.FP_K_CPU_STARTING

_fpdef.FP_K_CPU_STOPPING_swigconstant(_fpdef)
FP_K_CPU_STOPPING = _fpdef.FP_K_CPU_STOPPING

_fpdef.FP_K_CPU_STOP_FAILED_swigconstant(_fpdef)
FP_K_CPU_STOP_FAILED = _fpdef.FP_K_CPU_STOP_FAILED

_fpdef.HWINT_M_CPU_SELECTED_swigconstant(_fpdef)
HWINT_M_CPU_SELECTED = _fpdef.HWINT_M_CPU_SELECTED

_fpdef.HWINT_M_CPU_NOT_IN_RAD_swigconstant(_fpdef)
HWINT_M_CPU_NOT_IN_RAD = _fpdef.HWINT_M_CPU_NOT_IN_RAD

_fpdef.HWINT_M_PRIMARY_swigconstant(_fpdef)
HWINT_M_PRIMARY = _fpdef.HWINT_M_PRIMARY

_fpdef.HWINT_S_HWINT_FLAGS_swigconstant(_fpdef)
HWINT_S_HWINT_FLAGS = _fpdef.HWINT_S_HWINT_FLAGS

_fpdef.FPRAD_S_FPRAD_swigconstant(_fpdef)
FPRAD_S_FPRAD = _fpdef.FPRAD_S_FPRAD

_fpdef.FP_M_SPL_HOLD_swigconstant(_fpdef)
FP_M_SPL_HOLD = _fpdef.FP_M_SPL_HOLD

_fpdef.FP_K_LENGTH_swigconstant(_fpdef)
FP_K_LENGTH = _fpdef.FP_K_LENGTH

_fpdef.FP_C_LENGTH_swigconstant(_fpdef)
FP_C_LENGTH = _fpdef.FP_C_LENGTH

_fpdef.FP_S_FP_swigconstant(_fpdef)
FP_S_FP = _fpdef.FP_S_FP

_fpdef.FP_S_SIZE_swigconstant(_fpdef)
FP_S_SIZE = _fpdef.FP_S_SIZE

_fpdef.FP_S_USEABLE_CPUS_swigconstant(_fpdef)
FP_S_USEABLE_CPUS = _fpdef.FP_S_USEABLE_CPUS

_fpdef.FP_S_FAVORED_CPUS_swigconstant(_fpdef)
FP_S_FAVORED_CPUS = _fpdef.FP_S_FAVORED_CPUS
# This file is compatible with both classic and new-style classes.


