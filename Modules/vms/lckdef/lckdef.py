# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lckdef', [dirname(__file__)])
        except ImportError:
            import _lckdef
            return _lckdef
        if fp is not None:
            try:
                _mod = imp.load_module('_lckdef', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lckdef = swig_import_helper()
    del swig_import_helper
else:
    import _lckdef
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_lckdef.LCK_M_VALBLK_swigconstant(_lckdef)
LCK_M_VALBLK = _lckdef.LCK_M_VALBLK

_lckdef.LCK_M_CONVERT_swigconstant(_lckdef)
LCK_M_CONVERT = _lckdef.LCK_M_CONVERT

_lckdef.LCK_M_NOQUEUE_swigconstant(_lckdef)
LCK_M_NOQUEUE = _lckdef.LCK_M_NOQUEUE

_lckdef.LCK_M_SYNCSTS_swigconstant(_lckdef)
LCK_M_SYNCSTS = _lckdef.LCK_M_SYNCSTS

_lckdef.LCK_M_SYSTEM_swigconstant(_lckdef)
LCK_M_SYSTEM = _lckdef.LCK_M_SYSTEM

_lckdef.LCK_M_NOQUOTA_swigconstant(_lckdef)
LCK_M_NOQUOTA = _lckdef.LCK_M_NOQUOTA

_lckdef.LCK_M_CVTSYS_swigconstant(_lckdef)
LCK_M_CVTSYS = _lckdef.LCK_M_CVTSYS

_lckdef.LCK_M_RECOVER_swigconstant(_lckdef)
LCK_M_RECOVER = _lckdef.LCK_M_RECOVER

_lckdef.LCK_M_PROTECT_swigconstant(_lckdef)
LCK_M_PROTECT = _lckdef.LCK_M_PROTECT

_lckdef.LCK_M_NODLCKWT_swigconstant(_lckdef)
LCK_M_NODLCKWT = _lckdef.LCK_M_NODLCKWT

_lckdef.LCK_M_NODLCKBLK_swigconstant(_lckdef)
LCK_M_NODLCKBLK = _lckdef.LCK_M_NODLCKBLK

_lckdef.LCK_M_EXPEDITE_swigconstant(_lckdef)
LCK_M_EXPEDITE = _lckdef.LCK_M_EXPEDITE

_lckdef.LCK_M_QUECVT_swigconstant(_lckdef)
LCK_M_QUECVT = _lckdef.LCK_M_QUECVT

_lckdef.LCK_M_BYPASS_swigconstant(_lckdef)
LCK_M_BYPASS = _lckdef.LCK_M_BYPASS

_lckdef.LCK_M_NOIOLOCK8_swigconstant(_lckdef)
LCK_M_NOIOLOCK8 = _lckdef.LCK_M_NOIOLOCK8

_lckdef.LCK_M_NOFORK_swigconstant(_lckdef)
LCK_M_NOFORK = _lckdef.LCK_M_NOFORK

_lckdef.LCK_M_XVALBLK_swigconstant(_lckdef)
LCK_M_XVALBLK = _lckdef.LCK_M_XVALBLK

_lckdef.LCK_M_DEQALL_swigconstant(_lckdef)
LCK_M_DEQALL = _lckdef.LCK_M_DEQALL

_lckdef.LCK_M_CANCEL_swigconstant(_lckdef)
LCK_M_CANCEL = _lckdef.LCK_M_CANCEL

_lckdef.LCK_M_INVVALBLK_swigconstant(_lckdef)
LCK_M_INVVALBLK = _lckdef.LCK_M_INVVALBLK

_lckdef.LCK_M_RESV_NOIOLOCK8_swigconstant(_lckdef)
LCK_M_RESV_NOIOLOCK8 = _lckdef.LCK_M_RESV_NOIOLOCK8

_lckdef.LCK_M_RESV_NOFORK_swigconstant(_lckdef)
LCK_M_RESV_NOFORK = _lckdef.LCK_M_RESV_NOFORK

_lckdef.LCK_M_RESV_XVALBLK_swigconstant(_lckdef)
LCK_M_RESV_XVALBLK = _lckdef.LCK_M_RESV_XVALBLK

_lckdef.LCK_K_NLMODE_swigconstant(_lckdef)
LCK_K_NLMODE = _lckdef.LCK_K_NLMODE

_lckdef.LCK_K_CRMODE_swigconstant(_lckdef)
LCK_K_CRMODE = _lckdef.LCK_K_CRMODE

_lckdef.LCK_K_CWMODE_swigconstant(_lckdef)
LCK_K_CWMODE = _lckdef.LCK_K_CWMODE

_lckdef.LCK_K_PRMODE_swigconstant(_lckdef)
LCK_K_PRMODE = _lckdef.LCK_K_PRMODE

_lckdef.LCK_K_PWMODE_swigconstant(_lckdef)
LCK_K_PWMODE = _lckdef.LCK_K_PWMODE

_lckdef.LCK_K_EXMODE_swigconstant(_lckdef)
LCK_K_EXMODE = _lckdef.LCK_K_EXMODE

_lckdef.LCK_S_LCKDEF_swigconstant(_lckdef)
LCK_S_LCKDEF = _lckdef.LCK_S_LCKDEF
# This file is compatible with both classic and new-style classes.


