# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_psldef', [dirname(__file__)])
        except ImportError:
            import _psldef
            return _psldef
        if fp is not None:
            try:
                _mod = imp.load_module('_psldef', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _psldef = swig_import_helper()
    del swig_import_helper
else:
    import _psldef
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_psldef.PSL_M_PRVMOD_swigconstant(_psldef)
PSL_M_PRVMOD = _psldef.PSL_M_PRVMOD

_psldef.PSL_M_CURMOD_swigconstant(_psldef)
PSL_M_CURMOD = _psldef.PSL_M_CURMOD

_psldef.PSL_M_IPL_swigconstant(_psldef)
PSL_M_IPL = _psldef.PSL_M_IPL

_psldef.PSL_V_MAX_PS_REG_BIT_swigconstant(_psldef)
PSL_V_MAX_PS_REG_BIT = _psldef.PSL_V_MAX_PS_REG_BIT

_psldef.PSL_C_KERNEL_swigconstant(_psldef)
PSL_C_KERNEL = _psldef.PSL_C_KERNEL

_psldef.PSL_C_EXEC_swigconstant(_psldef)
PSL_C_EXEC = _psldef.PSL_C_EXEC

_psldef.PSL_C_SUPER_swigconstant(_psldef)
PSL_C_SUPER = _psldef.PSL_C_SUPER

_psldef.PSL_C_USER_swigconstant(_psldef)
PSL_C_USER = _psldef.PSL_C_USER

_psldef.PSL_S_PSLDEF_swigconstant(_psldef)
PSL_S_PSLDEF = _psldef.PSL_S_PSLDEF

_psldef.PSL_S_PRVMOD_swigconstant(_psldef)
PSL_S_PRVMOD = _psldef.PSL_S_PRVMOD

_psldef.PSL_S_CURMOD_swigconstant(_psldef)
PSL_S_CURMOD = _psldef.PSL_S_CURMOD

_psldef.PSL_S_IPL_swigconstant(_psldef)
PSL_S_IPL = _psldef.PSL_S_IPL
# This file is compatible with both classic and new-style classes.


